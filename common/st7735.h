#ifndef __ST7735_H__
#define __ST7735_H__

#include <avr/pgmspace.h>

#define DELAY_FLAG 0x80
#define _swap_uint8_t(a, b) { uint8_t t = a; a = b; b = t; }

enum ST7735_COMMANDS {
  ST7735_NOP = 0x00,
  ST7735_SWRESET = 0x01,
  ST7735_RDDID = 0x04,
  ST7735_RDDST = 0x09,

  ST7735_SLPIN = 0x10,
  ST7735_SLPOUT = 0x11,
  ST7735_PTLON = 0x12,
  ST7735_NORON = 0x13,

  ST7735_INVOFF = 0x20,
  ST7735_INVON = 0x21,
  ST7735_DISPOFF = 0x28,
  ST7735_DISPON = 0x29,
  ST7735_CASET = 0x2A,
  ST7735_RASET = 0x2B,
  ST7735_RAMWR = 0x2C,
  ST7735_RAMRD = 0x2E,

  ST7735_PTLAR = 0x30,
  ST7735_COLMOD = 0x3A,
  ST7735_MADCTL = 0x36,

  ST7735_FRMCTR1 = 0xB1,
  ST7735_FRMCTR2 = 0xB2,
  ST7735_FRMCTR3 = 0xB3,
  ST7735_INVCTR = 0xB4,
  ST7735_DISSET5 = 0xB6,

  ST7735_PWCTR1 = 0xC0,
  ST7735_PWCTR2 = 0xC1,
  ST7735_PWCTR3 = 0xC2,
  ST7735_PWCTR4 = 0xC3,
  ST7735_PWCTR5 = 0xC4,
  ST7735_VMCTR1 = 0xC5,

  ST7735_RDID1 = 0xDA,
  ST7735_RDID2 = 0xDB,
  ST7735_RDID3 = 0xDC,
  ST7735_RDID4 = 0xDD,

  ST7735_PWCTR6 = 0xFC,

  ST7735_GMCTRP1 = 0xE0,
  ST7735_GMCTRN1 = 0xE1
};

enum ST7735_COLORS {
  ST7735_COLOR_BLACK = 0x0000,
  ST7735_COLOR_BLUE = 0x001F,
  ST7735_COLOR_RED = 0xF800,
  ST7735_COLOR_GREEN = 0x07E0,
  ST7735_COLOR_CYAN = 0x07FF,
  ST7735_COLOR_MAGENTA = 0xF81F,
  ST7735_COLOR_YELLOW = 0xFFE0,
  ST7735_COLOR_WHITE = 0xFFFF
};

typedef enum {
  ST7735_LANDSCAPE,
  ST7735_PORTRAIT,
  ST7735_LANDSCAPE_INV,
  ST7735_PORTRAIT_INV
} ST_Orientation;

enum ST7735_MADCTL_ARGS {
  MADCTL_MY = 0x80,  // mirror Y
  MADCTL_MX = 0x40,  // mirrror x
  MADCTL_MV = 0x20,  // swap XY
  MADCTL_ML = 0x10,  // scan address order
  MADCTL_RGB = 0x00,
  MADCTL_BGR = 0x08,
  MADCTL_MH = 0x04   // horizontal scan oder
};

const uint8_t char_map[96][6] PROGMEM = {
  { 0x00, 0x00, 0x00, 0x00, 0x00 }, // space (32)
  { 0x00, 0x00, 0x5F, 0x00, 0x00 }, // !
  { 0x00, 0x07, 0x00, 0x07, 0x00 }, // "
  { 0x14, 0x7F, 0x14, 0x7F, 0x14 }, // #
  { 0x24, 0x2A, 0x7F, 0x2A, 0x12 }, // $
  { 0x23, 0x13, 0x08, 0x64, 0x62 }, // %
  { 0x36, 0x49, 0x56, 0x20, 0x50 }, // &
  { 0x00, 0x08, 0x07, 0x03, 0x00 }, // '
  { 0x00, 0x1C, 0x22, 0x41, 0x00 }, // (
  { 0x00, 0x41, 0x22, 0x1C, 0x00 }, // )
  { 0x2A, 0x1C, 0x7F, 0x1C, 0x2A }, // *
  { 0x08, 0x08, 0x3E, 0x08, 0x08 }, // +
  { 0x00, 0x80, 0x70, 0x30, 0x00 }, // ,
  { 0x08, 0x08, 0x08, 0x08, 0x08 }, // -
  { 0x00, 0x00, 0x60, 0x60, 0x00 }, // .
  { 0x20, 0x10, 0x08, 0x04, 0x02 }, // /
  { 0x3E, 0x51, 0x49, 0x45, 0x3E }, // 0
  { 0x00, 0x42, 0x7F, 0x40, 0x00 }, // 1
  { 0x72, 0x49, 0x49, 0x49, 0x46 }, // 2
  { 0x21, 0x41, 0x49, 0x4D, 0x33 }, // 3
  { 0x18, 0x14, 0x12, 0x7F, 0x10 }, // 4
  { 0x27, 0x45, 0x45, 0x45, 0x39 }, // 5
  { 0x3C, 0x4A, 0x49, 0x49, 0x31 }, // 6
  { 0x41, 0x21, 0x11, 0x09, 0x07 }, // 7
  { 0x36, 0x49, 0x49, 0x49, 0x36 }, // 8
  { 0x46, 0x49, 0x49, 0x29, 0x1E }, // 9
  { 0x00, 0x00, 0x14, 0x00, 0x00 }, // :
  { 0x00, 0x40, 0x34, 0x00, 0x00 }, // ;
  { 0x00, 0x08, 0x14, 0x22, 0x41 }, // <
  { 0x14, 0x14, 0x14, 0x14, 0x14 }, // =
  { 0x00, 0x41, 0x22, 0x14, 0x08 }, // >
  { 0x02, 0x01, 0x59, 0x09, 0x06 }, // ?
  { 0x3E, 0x41, 0x5D, 0x59, 0x4E }, // @
  { 0x7C, 0x12, 0x11, 0x12, 0x7C }, // A
  { 0x7F, 0x49, 0x49, 0x49, 0x36 }, // B
  { 0x3E, 0x41, 0x41, 0x41, 0x22 }, // C
  { 0x7F, 0x41, 0x41, 0x41, 0x3E }, // D
  { 0x7F, 0x49, 0x49, 0x49, 0x41 }, // E
  { 0x7F, 0x09, 0x09, 0x09, 0x01 }, // F
  { 0x3E, 0x41, 0x41, 0x51, 0x73 }, // G
  { 0x7F, 0x08, 0x08, 0x08, 0x7F }, // H
  { 0x00, 0x41, 0x7F, 0x41, 0x00 }, // I
  { 0x20, 0x40, 0x41, 0x3F, 0x01 }, // J
  { 0x7F, 0x08, 0x14, 0x22, 0x41 }, // K
  { 0x7F, 0x40, 0x40, 0x40, 0x40 }, // L
  { 0x7F, 0x02, 0x1C, 0x02, 0x7F }, // M
  { 0x7F, 0x04, 0x08, 0x10, 0x7F }, // N
  { 0x3E, 0x41, 0x41, 0x41, 0x3E }, // O
  { 0x7F, 0x09, 0x09, 0x09, 0x06 }, // P
  { 0x3E, 0x41, 0x51, 0x21, 0x5E }, // Q
  { 0x7F, 0x09, 0x19, 0x29, 0x46 }, // R
  { 0x26, 0x49, 0x49, 0x49, 0x32 }, // S
  { 0x03, 0x01, 0x7F, 0x01, 0x03 }, // T
  { 0x3F, 0x40, 0x40, 0x40, 0x3F }, // U
  { 0x1F, 0x20, 0x40, 0x20, 0x1F }, // V
  { 0x3F, 0x40, 0x38, 0x40, 0x3F }, // W
  { 0x63, 0x14, 0x08, 0x14, 0x63 }, // X
  { 0x03, 0x04, 0x78, 0x04, 0x03 }, // Y
  { 0x61, 0x59, 0x49, 0x4D, 0x43 }, // Z
  { 0x00, 0x7F, 0x41, 0x41, 0x41 }, // [
  { 0x02, 0x04, 0x08, 0x10, 0x20 }, // backslash
  { 0x00, 0x41, 0x41, 0x41, 0x7F }, // ]
  { 0x04, 0x02, 0x01, 0x02, 0x04 }, // ^
  { 0x40, 0x40, 0x40, 0x40, 0x40 }, // -
  { 0x00, 0x03, 0x07, 0x08, 0x00 }, // `
  { 0x20, 0x54, 0x54, 0x78, 0x40 }, // a
  { 0x7F, 0x28, 0x44, 0x44, 0x38 }, // b
  { 0x38, 0x44, 0x44, 0x44, 0x28 }, // c
  { 0x38, 0x44, 0x44, 0x28, 0x7F }, // d
  { 0x38, 0x54, 0x54, 0x54, 0x18 }, // e
  { 0x00, 0x08, 0x7E, 0x09, 0x02 }, // f
  { 0x18, 0xA4, 0xA4, 0x9C, 0x78 }, // g
  { 0x7F, 0x08, 0x04, 0x04, 0x78 }, // h
  { 0x00, 0x44, 0x7D, 0x40, 0x00 }, // i
  { 0x20, 0x40, 0x40, 0x3D, 0x00 }, // j
  { 0x7F, 0x10, 0x28, 0x44, 0x00 }, // k
  { 0x00, 0x41, 0x7F, 0x40, 0x00 }, // l
  { 0x7C, 0x04, 0x78, 0x04, 0x78 }, // m
  { 0x7C, 0x08, 0x04, 0x04, 0x78 }, // n
  { 0x38, 0x44, 0x44, 0x44, 0x38 }, // o
  { 0xFC, 0x18, 0x24, 0x24, 0x18 }, // p
  { 0x18, 0x24, 0x24, 0x18, 0xFC }, // q
  { 0x7C, 0x08, 0x04, 0x04, 0x08 }, // r
  { 0x48, 0x54, 0x54, 0x54, 0x24 }, // s
  { 0x04, 0x04, 0x3F, 0x44, 0x24 }, // t
  { 0x3C, 0x40, 0x40, 0x20, 0x7C }, // u
  { 0x1C, 0x20, 0x40, 0x20, 0x1C }, // v
  { 0x3C, 0x40, 0x30, 0x40, 0x3C }, // w
  { 0x44, 0x28, 0x10, 0x28, 0x44 }, // x
  { 0x4C, 0x90, 0x90, 0x90, 0x7C }, // y
  { 0x44, 0x64, 0x54, 0x4C, 0x44 }, // z
  { 0x00, 0x08, 0x36, 0x41, 0x00 }, // {
  { 0x00, 0x00, 0x77, 0x00, 0x00 }, // |
  { 0x00, 0x41, 0x36, 0x08, 0x00 }, // }
  { 0x00, 0x06, 0x09, 0x06, 0x00 },  // degree symbol = '~'
  { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
};


void st7735_init();
uint8_t st7735_get_width();
uint8_t st7735_get_height();
void st7735_on();
void st7735_off();
void st7735_sleep();
void st7735_wakeup();
void st7735_set_addr_win(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
void st7735_cmd(uint8_t cmd);
void st7735_data(uint8_t data);
void st7735_color(uint16_t color);
uint16_t st7735_rgb_color(uint8_t r, uint8_t g, uint8_t b);
void st7735_set_orientation(ST_Orientation orientation);
void st7735_pixel(int16_t x, int16_t y, uint16_t color);
void st7735_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color);
void st7735_vline(uint8_t x, uint8_t y, uint8_t h, uint16_t color);
void st7735_hline(uint8_t x, uint8_t y, uint8_t w, uint16_t coor);
void st7735_fill_screen(uint16_t color);
void st7735_circle(uint8_t x0, uint8_t y0, uint8_t r, uint16_t color);
void st7735_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint16_t color);
void st7735_char(char c, uint8_t x, uint8_t y, uint8_t scale, uint16_t fgcolor, uint16_t bgcolor);
void st7735_text(const char *text, uint8_t length, uint8_t x, uint8_t y, uint8_t scale, uint8_t space, uint16_t fgcolor, uint16_t bgcolor);

#endif
